[project]
name = "your-project-name"
version = "0.1.0"
description = "MLOps project template with modern Python tooling"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["machine-learning", "mlops", "data-science"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# Core dependencies needed to run the project
dependencies = [
    "mlflow==3.1.0",
    "pandas>=2.2.3",
    "scikit-learn>=1.7.0",
    "numpy>=2.3.0",
    "joblib>=1.5.0",
    "ipykernel>=6.29.5",
    "tqdm>=4.67.1",
    "jupyterlab>=4.4.3",
    "langchain-openai>=0.3.23",
    "langchain>=0.3.25",
    "langgraph>=0.4.8",
]

[dependency-groups]
# Dependencies needed only during development (testing, linting, etc.)
# Install with: uv sync --group dev
dev = [
    "mypy>=1.15.0",
    "ruff>=0.11.8",
    "pytest>=8.3.0",
    "pytest-cov>=6.0.0",
    "pre-commit>=4.1.0",
    "detect-secrets>=1.5.0",
    "bandit>=1.8.0",
]

# Optional dependencies for data visualization and experimentation
viz = [
    "matplotlib>=3.10.0",
    "seaborn>=0.13.0",
    "plotly>=5.24.0",
]

[tool.ruff]
# Ruff is a super-fast Python linter and formatter.
line-length = 88  # Max characters per line (like Black's default)
target-version = "py311" # Assumes Python 3.11 features

[tool.ruff.lint]
# Select which types of issues Ruff should check for.
# E/W: pycodestyle errors/warnings (PEP 8)
# F: Pyflakes (logical errors like unused imports/variables)
# I: isort (import sorting)
# B: flake8-bugbear (potential bugs and design issues)
# C4: flake8-comprehensions (more Pythonic list/dict/set comprehensions)
# UP: pyupgrade (suggests modern Python syntax)
# S: bandit (security issues)
select = ["E", "W", "F", "I", "B", "C4", "UP", "S"]
ignore = [
    "S101",  # Use of assert detected (allow in tests)
    "S603",  # subprocess call with shell=True
    "S607",  # subprocess call with shell=True partial executable path
]

[tool.ruff.format]
# Configure Ruff's auto-formatting behavior.
quote-style = "double"    # Prefer "double" quotes for strings
indent-style = "space"    # Use spaces for indentation

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101"]  # Allow assert statements in tests

[tool.mypy]
# Mypy is a static type checker for Python.
python_version = "3.11"        # Target Python version for type checking
warn_return_any = true         # Warn if functions implicitly return 'Any'
warn_unused_configs = true     # Warn about unused Mypy settings
disallow_untyped_defs = true   # Require type hints for function definitions
disallow_incomplete_defs = true # Require all parts of a function signature to be typed
check_untyped_defs = true      # Still type check the body of untyped functions
disallow_untyped_decorators = true # Require decorators to be typed
no_implicit_optional = true    # Make 'Optional[T]' explicit (no 'T' implying 'T | None')
warn_redundant_casts = true    # Warn if a type cast is unnecessary
warn_unused_ignores = true     # Warn about '# type: ignore' comments that are no longer needed
warn_no_return = true          # Warn if a function doesn't return when it should (or vice-versa)
warn_unreachable = true        # Warn about code that can never be executed
strict_equality = true         # Enforce stricter type checking for equality operations

# Fix module path issues
explicit_package_bases = true
namespace_packages = true

# Handle missing imports gracefully for MLOps libraries
ignore_missing_imports = true

# Exclude problematic directories
exclude = [
    "^build/",
    "^dist/",
    "^\\.venv/",
    "^\\.git/",
]

# Specific overrides for ML libraries without type stubs
[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "joblib.*",
    "pandas.*",
    "numpy.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "mlflow.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
# Pytest is a popular Python testing framework.
testpaths = ["tests"]          # Directory where your tests are located
pythonpath = ["."]             # This adds the project root to Python path
addopts = "--cov=src --cov-report=term-missing --cov-report=html --cov-fail-under=80"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests that should be run separately",
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "*/migrations/*", "venv/*", ".venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude = ["tests"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection tests
